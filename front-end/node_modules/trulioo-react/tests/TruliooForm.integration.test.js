"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _axios = _interopRequireDefault(require("axios"));

// proxy server must be running for these integration tests to pass successfully
// adjust the BASE_URL to match the address of your proxy server
var BASE_URL = 'http://localhost:3111';
it('countryCodes endpoint works',
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(done) {
    var endpoint, response;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            endpoint = '/api/getcountrycodes';
            _context.next = 3;
            return makeRequest(endpoint);

          case 3:
            response = _context.sent;
            expect(response).toBeTruthy();
            expect.assertions(1);
            done();

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
it('getConsents endpoint works',
/*#__PURE__*/
function () {
  var _ref2 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2(done) {
    var country, endpoint, response;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            country = 'IN';
            endpoint = "/api/getdetailedconsents/".concat(country);
            _context2.next = 4;
            return makeRequest(endpoint);

          case 4:
            response = _context2.sent;
            expect(response).toBeTruthy();
            expect.assertions(1);
            done();

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());

var makeRequest =
/*#__PURE__*/
function () {
  var _ref3 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee3(endpoint) {
    var URL, response;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            URL = BASE_URL + endpoint;
            _context3.prev = 1;
            _context3.next = 4;
            return _axios.default.get(URL);

          case 4:
            response = _context3.sent;
            return _context3.abrupt("return", response);

          case 8:
            _context3.prev = 8;
            _context3.t0 = _context3["catch"](1);
            return _context3.abrupt("return", false);

          case 11:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this, [[1, 8]]);
  }));

  return function makeRequest(_x3) {
    return _ref3.apply(this, arguments);
  };
}();