"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.submitForm = exports.getFields = exports.getCountries = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _axios = _interopRequireDefault(require("axios"));

require("core-js");

var R = _interopRequireWildcard(require("ramda"));

var _types = require("./types");

var BASE_URL;
var reservedFormDataKeys = ['countries', 'TruliooFields', 'Consents'];

var getCountries = function getCountries(url) {
  return (
    /*#__PURE__*/
    function () {
      var _ref = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(dispatch) {
        var URL, promise;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                BASE_URL = url;
                URL = "".concat(BASE_URL, "/api/getcountrycodes");
                _context.next = 4;
                return _axios.default.get(URL);

              case 4:
                promise = _context.sent;
                console.log('promise.data',promise.data)
                dispatch({
                  type: _types.GET_COUNTRIES,
                  payload: JSON.parse(promise.data.response).sort()
                });

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
};

exports.getCountries = getCountries;

var parseFields = function parseFields(obj) {
  var _arr = Object.entries(obj);

  for (var _i = 0; _i < _arr.length; _i++) {
    var _arr$_i = (0, _slicedToArray2.default)(_arr[_i], 2),
        key = _arr$_i[0],
        _ = _arr$_i[1];

    if (key == 0) {
      return;
    }

    if (key === 'label') {
      obj.title = obj[key];
    }

    parseFields(obj[key]);
  }

  return obj;
};

var requestFields =
/*#__PURE__*/
function () {
  var _ref2 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2(countryCode) {
    var URL, response, parsedFields;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(countryCode === '' || !countryCode)) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return");

          case 2:
            URL = "".concat(BASE_URL, "/api/getrecommendedfields/").concat(countryCode);
            _context2.next = 5;
            return _axios.default.get(URL);

          case 5:
            response = _context2.sent;
            parsedFields = parseFields(JSON.parse(response.data.response));
            return _context2.abrupt("return", parsedFields);

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function requestFields(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var updateStateProvince = function updateStateProvince(obj, subdivisions) {
  Object.keys(obj).forEach(function (k) {
    if (k === 'StateProvinceCode' && subdivisions.length > 0) {
      obj[k] = (0, _objectSpread2.default)({}, obj[k], {
        enum: subdivisions.map(function (x) {
          return x.Code;
        }),
        enumNames: subdivisions.map(function (x) {
          return x.Name;
        })
      });
    } else if (obj[k] !== null && (0, _typeof2.default)(obj[k]) === 'object') {
      updateStateProvince(obj[k], subdivisions);
    }
  });
};

var requestSubdivisions =
/*#__PURE__*/
function () {
  var _ref3 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee3(countryCode) {
    var URL, response, subdivisions;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!(countryCode === '' || !countryCode)) {
              _context3.next = 2;
              break;
            }

            return _context3.abrupt("return");

          case 2:
            URL = "".concat(BASE_URL, "/api/getcountrysubdivisions/").concat(countryCode);
            _context3.next = 5;
            return _axios.default.get(URL);

          case 5:
            response = _context3.sent;
            subdivisions = JSON.parse(response.data.response); // sorting subdivisions by 'Name'

            return _context3.abrupt("return", R.sortBy(R.compose(R.toLower, R.prop('Name')))(subdivisions));

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function requestSubdivisions(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

function requestConsents(_x4) {
  return _requestConsents.apply(this, arguments);
}

function _requestConsents() {
  _requestConsents = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee6(countryCode) {
    var URL, response, consents;
    return _regenerator.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (!(countryCode === '' || !countryCode)) {
              _context6.next = 2;
              break;
            }

            return _context6.abrupt("return");

          case 2:
            URL = "".concat(BASE_URL, "/api/getdetailedconsents/").concat(countryCode);
            _context6.next = 5;
            return _axios.default.get(URL);

          case 5:
            response = _context6.sent;
            consents = JSON.parse(response.data.response);
            return _context6.abrupt("return", consents);

          case 8:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));
  return _requestConsents.apply(this, arguments);
}

var appendConsentFields = function appendConsentFields(fields, consents) {
  if (consents === undefined || consents.length <= 0) {
    return;
  }

  fields.Consents = generateConsentSchema(consents);
};

var generateConsentSchema = function generateConsentSchema(consents) {
  if (consents === undefined || consents.length <= 0) {
    return;
  }

  var schema = {
    title: 'Consents',
    type: 'object',
    required: [],
    properties: {}
  };
  consents.forEach(function (x) {
    schema.required.push(x.Name);
    schema.properties[x.Name] = {
      title: x.Text,
      type: 'boolean',
      default: false
    };
  });
  return schema;
};

var validateCustomFields = function validateCustomFields(customFields) {
  if (customFields) {
    Object.keys(customFields).forEach(function (key) {
      if (reservedFormDataKeys.includes(key)) {
        throw Error("".concat(key, " is a reserved field key. Please use another key for your custom field."));
      }
    });
  }
};

var parseTruliooFields = function parseTruliooFields(formData) {
  var truliooFields = {};
  Object.keys(formData).forEach(function (key) {
    if (reservedFormDataKeys.includes(key)) {
      truliooFields[key] = formData[key];
    }
  });
  return truliooFields;
};

var getFields = function getFields(countryCode, customFields) {
  return (
    /*#__PURE__*/
    function () {
      var _ref4 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee4(dispatch) {
        var fields, subdivisions, consents;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(countryCode === '' || !countryCode)) {
                  _context4.next = 2;
                  break;
                }

                return _context4.abrupt("return");

              case 2:
                validateCustomFields(customFields);
                _context4.next = 5;
                return requestFields(countryCode);

              case 5:
                fields = _context4.sent;
                _context4.next = 8;
                return requestSubdivisions(countryCode);

              case 8:
                subdivisions = _context4.sent;
                _context4.next = 11;
                return requestConsents(countryCode);

              case 11:
                consents = _context4.sent;
                consents = generateConsentSchema(consents);

                if (fields && fields.properties) {
                  updateStateProvince(fields.properties, subdivisions);
                }

                dispatch({
                  type: _types.GET_FIELDS,
                  payload: {
                    fields: fields,
                    consents: consents,
                    customFields: customFields,
                    formData: {
                      countries: countryCode
                    }
                  }
                });

              case 15:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x5) {
        return _ref4.apply(this, arguments);
      };
    }()
  );
};

exports.getFields = getFields;

var getCountryCode = function getCountryCode(form) {
  var _arr2 = Object.entries(form);

  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
    var _arr2$_i = (0, _slicedToArray2.default)(_arr2[_i2], 2),
        key = _arr2$_i[0],
        value = _arr2$_i[1];

    if (key === 'countries') {
      return value;
    }
  }
};

var parseFormData = function parseFormData(form) {
  if (form.TruliooFields.Document) {
    var docFront = form.TruliooFields.Document.DocumentFrontImage;
    form.TruliooFields.Document.DocumentFrontImage = docFront.substr(docFront.indexOf(',') + 1);
    var docBack = form.TruliooFields.Document.DocumentBackImage;

    if (docBack) {
      form.TruliooFields.Document.DocumentBackImage = docBack.substr(docBack.indexOf(',') + 1);
    }

    var livePhoto = form.TruliooFields.Document.LivePhoto;

    if (livePhoto) {
      form.TruliooFields.Document.LivePhoto = livePhoto.substr(livePhoto.indexOf(',') + 1);
    }
  }

  if (form.TruliooFields.NationalIds) {
    form.TruliooFields.NationalIds = [form.TruliooFields.NationalIds];
  }

  return form;
};

var parseConsents = function parseConsents(consents) {
  var result = [];

  if (consents === undefined) {
    return result;
  }

  Object.keys(consents).forEach(function (x) {
    if (consents[x]) {
      result.push(x);
    }
  });
  return result;
};

var getBody = function getBody(form) {
  var countryCode = getCountryCode(form);
  form = parseFormData(form);
  return {
    AcceptTruliooTermsAndConditions: true,
    CleansedAddress: true,
    ConfigurationName: 'Identity Verification',
    CountryCode: countryCode,
    DataFields: form.TruliooFields,
    ConsentForDataSources: parseConsents(form.Consents)
  };
};

var submitForm = function submitForm(form) {
  return (
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee5() {
      var formClone, truliooFormData, body, URL, promiseResult;
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              formClone = JSON.parse(JSON.stringify(form));
              truliooFormData = parseTruliooFields(formClone);
              body = getBody(truliooFormData);
              URL = "".concat(BASE_URL, "/api/verify");
              _context5.next = 6;
              return _axios.default.post(URL, body).then(function (response) {
                return (0, _objectSpread2.default)({}, response, {
                  body: body
                });
              });

            case 6:
              promiseResult = _context5.sent;
              return _context5.abrupt("return", promiseResult);

            case 8:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }))
  );
};

exports.submitForm = submitForm;